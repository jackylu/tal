<?xml version="1.0" encoding= "UTF-8"?>
<beans xmlns= "http://www.springframework.org/schema/beans"
       xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance" xmlns:aop= "http://www.springframework.org/schema/aop"
       xmlns:context= "http://www.springframework.org/schema/context" xmlns:tx= "http://www.springframework.org/schema/tx"
       xmlns:jpa= "http://www.springframework.org/schema/data/jpa"
       xmlns:security= "http://www.springframework.org/schema/security"
       xmlns:mvc="http://www.springframework.org/schema/mvc" 
       xsi:schemaLocation= "
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-3.2.xsd
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/data/jpa
            http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
            " >
            
            

      <!-- 定义受环境影响易变的变量 -->
      <bean class= "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
             <!-- 除了支持配置的properties文件外,还支持系统属性 -->
             <property name ="systemPropertiesModeName" value= "SYSTEM_PROPERTIES_MODE_OVERRIDE" />
             <!-- 是否可以忽略无法加载到的文件 -->
             <property name ="ignoreResourceNotFound" value= "true" />
             <property name ="locations">
                   <list >
                         <!-- 标准配置 -->
                         <value >classpath*:/spring-jdbc.properties</value>

                   </list >
             </property >
      </bean >

     <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
     <context:component-scan base-package="com.**" />
     
     <!-- 默认的注解映射的支持 -->  
     <mvc:annotation-driven>  
	     <mvc:message-converters>  
	        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
	            <!-- <property name="objectMapper" value="com.tax.util.JsonUtil.mapper"/> -->  
	            <property name="supportedMediaTypes">  
	                <list>  
	                    <value>application/json;charset=UTF-8</value>  
	                </list>  
	            </property>    
	        </bean>  
	     </mvc:message-converters>  
	 </mvc:annotation-driven> 
	 
	 <!-- 文件上传 -->
	 <bean id="multipartResolver"  
    	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
            <!-- 设置上传文件的最大尺寸为1MB -->  
        <property name="maxUploadSize">  
            <value>104857600</value>  
        </property>  
   	  </bean>   
     
   <!-- <bean  
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJacksonHttpMessageConverter" />  
            </list>  
        </property>  
    </bean>  
  
    <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />   
    -->
    
     <!-- 视图解释类 -->  
   <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
    <property name="prefix" value="/WEB-INF/jsp/"/>  
    <property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->  
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />  
   </bean>  
   
   <!-- 对静态资源文件的访问  方案一 （二选一） -->  
    <mvc:default-servlet-handler/> 
    
    
    <!-- 总错误处理-->  
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="defaultErrorView">    
            <value>/error/error</value>  
        </property>  
        <property name="defaultStatusCode">    
            <value>500</value>  
        </property>     
    <property name="warnLogCategory">    
            <value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>  
        </property>     
    </bean>   

      
      <!-- 数据源配置,使用容器内的DBCP数据库连接池 -->
      <!--    
      <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName">
               <value>java:comp/ env/jdbc /erp</value>
            </property>
      </bean>
      -->
      
     
 
       <!-- DBCP 连接池 -->
      <bean id ="dataSource" class= "org.apache.commons.dbcp.BasicDataSource" destroy-method ="close">
             <!--driverClassName: 驱动名-->
             <property name ="driverClassName" value= "${jdbc.driver}" />
             <!--url: 连接URL-->
             <property name ="url" value="${jdbc.url}" />
             <!--username : 连接用户名-->
             <property name ="username" value="${jdbc.username}" />
             <!--password: 连接密码-->
             <property name ="password" value="${jdbc.password}" />
             <!--initialSize: 初始化连接-->  
             <property name ="initialSize" value="5"/>  
             <!--maxIdle: 最大空闲连接-->  
             <property name ="maxIdle" value="10"/>  
             <!--minIdle: 最小空闲连接-->  
             <property name ="minIdle" value="5"/>  
             <!--maxActive: 最大连接数量-->  
             <property name ="maxActive" value="15"/>  
             <!--removeAbandoned: 是否自动回收超时连接-->  
             <property name ="removeAbandoned" value= "true"/> 
             <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->  
             <property name ="removeAbandonedTimeout" value= "180"/> 
             <!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒-->  
             <property name ="maxWait" value="3000"/>  
      </bean >
      
      
      <!-- 使用JDBC事物 -->
      <bean id ="transactionManager" class= "org.springframework.jdbc.datasource.DataSourceTransactionManager" >
             <property name ="dataSource" ref="dataSource" />
      </bean >
      
      
      <!-- AOP配置事物 -->
      <tx:advice id ="transactionAdvice" transaction-manager="transactionManager" >
             <tx:attributes >
                   <tx:method name ="save*" propagation="REQUIRED"/>
                   <tx:method name ="add*" propagation="REQUIRED"/>
                   <tx:method name ="insert*" propagation="REQUIRED"/>
                   <tx:method name ="delete*" propagation="REQUIRED"/>
                   <tx:method name ="remove*" propagation="REQUIRED"/>
                   <tx:method name ="update*" propagation="REQUIRED"/>
                   <tx:method name ="query*"  propagation="REQUIRED" read-only= "true" />
                   <tx:method name ="get*"  propagation="REQUIRED" read-only= "true" />
                   <tx:method name ="list*"  propagation="REQUIRED" read-only= "true" />
                   <tx:method name ="*" read-only="true" propagation="REQUIRED"/>
             </tx:attributes >
      </tx:advice >
      
      <!-- 配置AOP切面 -->
      <aop:config >
             <aop:pointcut id ="transactionPointcut" expression= "execution(* com.tal.*.service.*Service.*(..))" />
             <aop:advisor advice-ref ="transactionAdvice" pointcut-ref= "transactionPointcut" />
      </aop:config >
      
      <!-- 使用annotation注解方式配置事务 -->
      <tx:annotation-driven transaction-manager ="transactionManager" />
      
      <bean id="xMLMapperLoader" class="com.tal.mybatis.XMLMapperLoader" autowire="byType"></bean>
      
      <!-- 创建SqlSessionFactory，需指定数据源，property名称必须为dataSource   
      <bean id ="sqlSessionFactory" class= "org.mybatis.spring.SqlSessionFactoryBean" >-->
      <bean id ="sqlSessionFactory" class= "com.tal.mybatis.SqlSessionFactoryBeanExt" >
             <property name ="dataSource" ref="dataSource" />
             <property name ="configLocation" value= "classpath:SqlMapConfig.xml"></property >
             <!-- 自动加载Mybatis mapper.xml 
             <property name ="mapperLocations" value= "classpath:com/**/dao/*Mapper.xml" ></property >-->
      </bean >
      
       <!-- 扫描 basePackage下所有的接口，根据对应的mapper.xml为其生成代理类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tal.dao" />
	</bean>
      
      
      <!-- 配置SQLSession模板 -->
      <bean id ="sqlSession" class= "org.mybatis.spring.SqlSessionTemplate" >
             <constructor-arg index ="0" ref="sqlSessionFactory" />
      </bean >


</beans>
